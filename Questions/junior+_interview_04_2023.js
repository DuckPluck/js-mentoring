// Тк хронометраж час, знакомство пропускаем, переходим сразу к технической части
// Реплит инвайт: https://replit.com/join/ujlgayffqg-duckpluck

// Вопросы TODO: (о - ответил, н - не ответил, п - ответил на полшишки):

// * ИНЖЕНЕРНЫЙ РАЗДЕЛ *
// Как получаем веб страницу?
// Как браузер рисует страницу?
// Что такое REST API
// Как сделать запрос?
// Что такое html?
// Что такое DOM?
// Что такое Семантическая верстка?
// Чем адаптивная верстка отличается от резиновой верстки?
// Что такое отзывчивая верстка? (responsive)
// Что такое css?
// В css есть специфичность, что это и как влияет на код? (каскад)
// Как браузер хранит информацию о сессии (как хранит данные о входе?)



// * JS * (открывать теорию) + 2-3 задачи с вариантами ответов
// Что такое переменные в js? (Какие бывают? в чем отличие?)
// Где хранятся глобальные методы и переменные?
// Что делать, если браузер не поддерживает фичи современной спецификации js, например тип данных symbol? (Кстати что такое symbol?)
// Какие есть способы создать функцию? (1 задача)
// Что такое this? Какие с ним есть проблемы? (bind)
// Что такое прототипное наследование? (2 задача)
// Сколько в js типов данных? а вот например есть такая структура - function, это еще один - девятый тип данных?
// Чем примитивные типы данных отличаются от не примитивных? (Как и где хранятся?) (Почему в задаче получилось вызвать метод на примитиве?)
// Что такое лексическое окружение (lexical environment)? (3 задача)
// Что такое чистая функция? Что такое иммутабельность?
// Что такое кэширование?
// Что такое map, set? Чем отличается от weak?
// Что такое дескриптор св-ва? (4 задача)
// Что такое промисы? Зачем нужны? Чем лучше колбэков?



// * REACT *
// Что такое jsx?
// Как рендернуть компонент?
// Как ререндернуть компонент, если мы что-то в нем изменили?
// Что такое виртуальное DOM дерево? Зачем оно нужно?
// Зачем нужны ключи? (reconciliation)
// Что такое HOC?
// Что такое ref?
// С какими хуками знаком? (подробнее про конкретные)



// * JS Задачи *
// 1. Что будет в консоли?
// function giveLydiaPizza() {
//   return "Here is pizza!"
// }
//
// const giveLydiaChocolate = () => "Here's chocolate... now go hit the gym already."
//
// console.log(giveLydiaPizza.prototype)
// console.log(giveLydiaChocolate.prototype)

// A: { constructor: ...} { constructor: ...}
// B: {} { constructor: ...}
// C: { constructor: ...} {}
// D: { constructor: ...} undefined

// // Ответ D - стрелочные функции не имеют прототипа


// 2. Что будет в консоли?
// String.prototype.giveLydiaPizza = () => {
//   return "Just give Lydia pizza already!";
// };
//
// const name = "Lydia";
//
// console.log(name.giveLydiaPizza())

// A: "Just give Lydia pizza already!"
// B: TypeError: not a function
// C: SyntaxError
// D: undefined

// // Ответ: A - просто добавили во встроенный конструктор кастомный метод


// 3. Что будет в консоли?
// let count = 0;
// (function immediate() {
//   if (count === 0) {
//     let count = 1;
//     console.log(count);
//   }
//   console.log(count);
// })();

// // Ответ: 1 0 - чему принадлежит локальная count? какая область видимости у let? -
// // в области видимости if создается локальная переменная count, далее в функции вызывается замыкание на глобальную count


// 4. Что будет в консоли?
// const person = { name: "Lydia" };
//
// Object.defineProperty(person, "age", { value: 21 });
//
// console.log(person);
// console.log(Object.keys(person));

// A: { name: "Lydia", age: 21 }, ["name", "age"]
// B: { name: "Lydia", age: 21 }, ["name"]
// C: { name: "Lydia"}, ["name", "age"]
// D: { name: "Lydia"}, ["age"]

// // Ответ: B - Когда мы добавляем свойство к объекту с помощью метода defineProperty, все флаги дескрипторов у них в положении false