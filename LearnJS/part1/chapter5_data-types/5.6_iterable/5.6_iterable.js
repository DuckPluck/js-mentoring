// https://learn.javascript.ru/iterable

// –ò—Ç–µ—Ä–∏—Ä—É–µ–º—ã–µ –æ–±—ä–µ–∫—Ç—ã ‚Äì —ç—Ç–æ –æ–±—ä–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª–∏–∑—É—é—Ç –º–µ—Ç–æ–¥ '[Symbol.iterator]' (–ø—Ä–∏–º–µ—Ä —Å—Ç—Ä–æ–∫–∞)
// –ü—Å–µ–≤–¥–æ–º–∞—Å—Å–∏–≤—ã ‚Äì —ç—Ç–æ –æ–±—ä–µ–∫—Ç—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –∏–Ω–¥–µ–∫—Å—ã(0,1,2,3...) –∏ —Å–≤–æ–π—Å—Ç–≤–æ length, —Ç–æ –µ—Å—Ç—å, –æ–Ω–∏ –≤—ã–≥–ª—è–¥—è—Ç –∫–∞–∫ –º–∞—Å—Å–∏–≤—ã (–ø—Ä. —Å—Ç—Ä–æ–∫–∞)


// –°—É—â–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ for...of –Ω–∞–∑—ã–≤–∞—é—Ç—Å—è –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–º–∏
  // –≠—Ç–æ –æ–±—ä–µ–∫—Ç—ã, –º–∞—Å—Å–∏–≤—ã, —Å—Ç—Ä–æ–∫–∏ —Å–æ —Å–≤-–≤–æ–º `[Symbol.iterator]`
    // –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –º–æ–∂–Ω–æ - `Object.getOwnPropetySymbol()`

// –í –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–µ –æ–±—ä–µ–∫—Ç—ã –æ–Ω –≤—Å—Ç—Ä–æ–µ–Ω –∑–∞—Ä–∞–Ω–µ–µ (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–∫—É), –≤ –Ω–µ–∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–µ –º—ã –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –ª–æ–≥–∏–∫—É:
  // –°–Ω–∞—á–∞–ª–∞ for...of –≤—ã–∑—ã–≤–∞–µ—Ç `[Symbol.iterator]`, –ø–æ—Ç–æ–º –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ —Ç–æ–º—É, —á—Ç–æ –æ–Ω –≤–µ—Ä–Ω–µ—Ç, –∏ —Ü–∏–∫–ª–∏—á–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç —Ç–∞–º `.next()`
    // `.next()` –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å done –∏ value. –ï—Å–ª–∏ –≤–µ—Ä–Ω–µ—Ç—Å—è done: true, —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è.
const obj = {
  from: 1,
  to: 5,

  [Symbol.iterator]() {


    return {
      current: this.from,
      last: this.to,

      next() {
        if (this.current <= this.last) {
          return {done: false, value: this.current++};
        }
          return {done: true};
      }
    }


  }
};
for (key of obj) {
  console.log(key);   // Output: 1 2 3 4 5
}



// –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ —á–µ–º –æ–¥–Ω–æ–≥–æ –∏—Ç–µ—Ä–∏—Ä–∞—Ç–æ—Ä–∞, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `for...of` —Å –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–µ–π:
for ([key, value] of Object.entries(obj)) {
  console.log(key, value);                    // Output: from 1   to 5
}



// `for...of` –≤ —Å—Ç—Ä–æ–∫–µ –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç —Å–∏–º–≤–æ–ª—ã (–≤—Å—Ç—Ä–æ–µ–Ω –∑–∞—Ä–∞–Ω–µ–µ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ-–æ–±–æ–ª–æ—á–∫–µ)
const str = 'üòÄüòÇü§©üòåüòàüò¨üò≠ü•¥ü§¨ü§†üò°ü§©ü•∫';
for (ch of str) {
  console.log(ch);  // Output: üòÄ üòÇ ü§© üòå üòà üò¨ üò≠ ü•¥ ü§¨ ü§† üò° ü§© ü•∫
}



// –Ø–≤–Ω—ã–π –≤—ã–∑–æ–≤ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞ - –º—ã –º–æ–∂–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–µ—Ç–æ–¥–æ–º `.next()` –≤—Ä—É—á–Ω—É—é
const iterator = obj[Symbol.iterator]()
while (true) {
  let current = iterator.next();
  if (current.done) { break }
  console.log(current);
}



// –ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∏–∑ –ø—Å–µ–≤–¥–æ–º–∞—Å—Å–∏–≤–∞ –∏–ª–∏ –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –º–∞—Å—Å–∏–≤ (–¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ—Ç–æ–¥–∞–º –º–∞—Å—Å–∏–≤–∞) - 
  // `Array.from(obj[, mapFn, thisArg])` - `mapFn` –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —ç–ª-—Ç—ã –∫–æ–ª–±—ç–∫–æ–º, `thisArg` –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–±–∏–Ω–¥–∏—Ç—å this –¥–ª—è `mapFn`
    // –ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã –º–µ—Ç–æ–¥–∞:
    let from = '123';
    let result = [];
    for (let c of from) {
      result.push(c);
    }
    console.log(result);