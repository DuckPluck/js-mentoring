// В хорошей верстке не должно быть #hex rgb и тд. Должна быть продуманная структура с переменным, содержащими цвета
// Все элементы макета необходимо заранее поделить на компоненты, прописать их концепцию, состояния и создавать экземпляры



// Существующие методологии для верстки - БЭМ, AMCSS, OOCSS, Atomic CSS, OPOR, MCSS, SMACSS, FUN, DoCSSa. Чаще всего используют БЭМ

// БЭМ (Блок Элемент Модификатор https://ru.bem.info/methodology/quick-start/):
// Эл-т отделаяется от Блока - `__`, Модификатор отделяется от Эл-та или Блока - `_`
// Блок - что? (class="block"),     Элемент - какой, как выглядит? (class="block__elem1"),    Модификатор - какой размер?, какая тема? (elem1_s, elem1_islands)
// Создавайте блок, в случае если фрагмент кода может использоваться повторно и не зависит от реализации других компонентов страницы
// Нельзя создавать элементы элементов. В подобном случае вместо внешнего элемента необходимо создавать служебный блок
// Модификатор нельзя использовать самостоятельно, только с Блоком или Эл-том

// Один блок — одна директория.
// Имена блока и его директории совпадают. Например, блок header — директория header/, блок menu — директория menu/.
// Реализация блока разделяется на отдельные файлы-технологии. Например, header.css, header.js.
// Директория блока является корневой для поддиректорий соответствующих ему элементов и модификаторов.
// Имена директорий элементов начинаются с двойного подчеркивания (__). Например, header/__logo/, menu/__item/.
// Имена директорий модификаторов начинаются с одинарного подчеркивания (_). Например, header/_fixed/, menu/_theme_islands/.
// Реализации элементов и модификаторов разделяются на отдельные файлы-технологии. Например, header__input.js, header_theme_islands.css.



// webPack - собирает модули js для больших проектов (https://habr.com/ru/post/514838/)
// Сборщики - конструктор для не замороченных проектов (parcel, vite и тп)

// UI kit - готовые ui компоненты для верстки (bootstrap, vuetify, primeNg, и тп)
// Для создания своих UI китов юзается storybook

// Препроцессор - рендерит из читаемого алгоритма с циклами условиями и т.д. html\css файл. (pug, haml, php => html; scss, sass => css)


// Для анимации использовать `transition` и `transform()` свойства

// Селектор - атрибут ноды, в который можно передавать св-ва. У селекторов есть приоритет

// Для инкапсуляции классов в react используются css модули
// `!important` - повышает приоритет css свойства над всеми другими аналогичными (лучше не использовать)
// лучше использовать ванильные (нативные) переменные css (они быстрее и везде поддерживаются)

// Есть сайт для проверки семантики сайта

// нужно постоянно тестить свою работу на разных браузерах (существуют сайты, которые чекают совместимость)

// можно писать линтеры для контроля кода, если работаешь в команде